import asyncio
import datetime
import html
import locale
import logging
import requests
import sys

from aiogram import Dispatcher, F, html, Router
#from aiogram.dispatcher.middlewares import LifetimeControllerMiddleware
from aiogram.filters import Command
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import CallbackQuery, InlineKeyboardButton, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from urllib.parse import quote
#from apscheduler.schedulers.asyncio import AsyncIOScheduler

from bot import bot
from constants import crop_week_day, month_dict, tournament_name
from config import ANNOUNCEMENT_CHANNEL_ID, CHANNEL_ID, TOPIC_ID
from keyboards import build_create_theme_markup, build_reg_markup, get_checking_keyboard, choosing_tournament
from utils import difficulty_symbol, get_item_color, get_preview_url

locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')


dp = Dispatcher(storage=MemoryStorage())
rt = Router()


"""
class SchedulerMiddleware(LifetimeControllerMiddleware):

    def __init__(self, scheduler: AsyncIOScheduler):
        super().__init__()
        self._scheduler = scheduler

    async def pre_process(self, obj: TelegramObject, data: Dict[str, Any], *args: Any):
        data["scheduler"] = self._scheduler
"""
class PostForm(StatesGroup):
    tournamentid = State()
    shrek_mkm = State()
    date_info = State()
    time_info = State()
    editors = State()
    price = State()


###############################################################################
#########################   –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞   ##############################
###############################################################################


@rt.message(Command(commands=["start"]))
async def first_fork(message: Message):
    await message.answer(text="–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞!")


@rt.message(Command(commands=["make_me_post"]))
async def first_fork(message: Message):
    builder_fork = InlineKeyboardBuilder()
    fork_buttons = [
        InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–π –∏–≥—Ä–µ", callback_data='creation'),
        InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—à–µ–¥—à–µ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞", callback_data='edition'),
        InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data='end')
    ]
    builder_fork.row(*fork_buttons, width=1)
    markup_fork = builder_fork.as_markup()
    await bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å? ', reply_markup=markup_fork)


@rt.callback_query(F.data == 'end')
async def process_start_command(call: CallbackQuery):
    await call.message.answer('–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!')
    await call.answer()


@rt.callback_query(F.data == 'edition')
async def existing_post_edition(call: CallbackQuery):
    await call.message.answer("–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
    await call.answer()


@rt.message(F.forward_from_chat[F.type == "channel"].as_("channel"))
async def edition(message: Message):
    txt = message.html_text
    keyboard = message.reply_markup
    border = txt.find('üí≤')
    new_txt = txt[:border].rstrip()
    post_id = message.forward_from_message_id
    await bot.edit_message_text(text=new_txt, chat_id=CHANNEL_ID, message_id=post_id, reply_markup=keyboard)
    await message.answer("–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω")
    await first_fork(message=message)

@rt.callback_query(F.data == 'creation')
async def process_start_command(call: CallbackQuery, state: FSMContext):
    tour_fork = choosing_tournament()
    await call.message.answer(text='–ö–∞–∫–æ–π —Ç—É—Ä–Ω–∏—Ä –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?', reply_markup=tour_fork)
    await state.set_state(PostForm.tournamentid)
    await call.answer()

# —à—Ä–µ–∫/–º–∫–º
@rt.callback_query(F.data == 'shrek_mkm')
async def process_start_command(call: CallbackQuery, state: FSMContext):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ (–Ω–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ç—É—Ä)')
    await state.set_state(PostForm.shrek_mkm)
    await call.answer()

@rt.message(PostForm.shrek_mkm)
async def shr_mkm_name(message: Message, state: FSMContext):
    global difficulty
    difficulty = 2
    await state.update_data(shrek_mkm=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>{–∏–º—è —Ñ–∞–º–∏–ª–∏—è}, {–∏–º—è —Ñ–∞–º–∏–ª–∏—è}, ... </i> \n–ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤ —à–µ—Å—Ç—å –∏ –±–æ–ª–µ–µ -- —É–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏–∏ <i>({—Ñ–∞–º–∏–ª–∏—è}, {—Ñ–∞–º–∏–ª–∏—è}, ...)</i> \n \
<blockquote><b>–ü—Ä–∏–º–µ—Ä 1:</b> \n–ú–∞–∫—Å–∏–º –ú–µ—Ä–∑–ª—è–∫–æ–≤, –°–µ—Ä–≥–µ–π –¢–µ—Ä–µ–Ω—Ç—å–µ–≤, –ê–Ω–¥—Ä–µ–π –°–∫–∏—Ä–µ–Ω–∫–æ, –ú–∞—Ç–≤–µ–π –ì–æ–º–æ–Ω\n\
<b>–ü—Ä–∏–º–µ—Ä 2: </b>\n–õ–µ—à–∫–æ–≤–∏—á, –ù–∞—É–≥–æ–ª—å–Ω–æ–≤, –ü–æ–ª–µ–≤–æ–π, –†–∞—Å–∫—É–º–∞–Ω–¥—Ä–∏–Ω, –†–æ–∂–¥–µ—Å—Ç–≤–∏–Ω, –†—ã–±–∞—á—É–∫, –°—É—à–∫–æ–≤</blockquote>")
    await state.set_state(PostForm.editors)

@rt.message(PostForm.editors)
async def shr_mkm_name(message: Message, state: FSMContext):
    await state.update_data(editors=message.text)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>–î–î.–ú–ú.–ì–ì–ì–ì</i> –∏–ª–∏ <i>–î–î/–ú–ú/–ì–ì–ì–ì</i>")
    await state.set_state(PostForm.date_info)

# –ù–ï —à—Ä–µ–∫ –∏ –ù–ï –ú–ö–ú
@rt.callback_query(F.data == 'another_tournament')
async def process_start_command(call: CallbackQuery, state: FSMContext):
    await call.message.answer('–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –ø–æ—Å—Ç—ã –∏ –æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –∏–≥—Ä–µ')
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ ID —Ç—É—Ä–Ω–∏—Ä–∞:')
    await state.set_state(PostForm.tournamentid)
    await call.answer()

# –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞, –ø–µ—Ä–µ—Ö–æ–¥ –∫—É—Ä—Å–æ—Ä–∞ –Ω–∞ –ø–æ–ª–µ –¥–ª—è –¥–∞—Ç—ã
@rt.message(PostForm.tournamentid)
async def get_tournament_info(message: Message, state: FSMContext):
    await state.update_data(tournamentid=message.text)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>–î–î.–ú–ú.–ì–ì–ì–ì</i> –∏–ª–∏ <i>–î–î/–ú–ú/–ì–ì–ì–ì</i>")
    await state.set_state(PostForm.date_info)

# –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –¥–∞—Ç–∞, –ø–µ—Ä–µ—Ö–æ–¥ –∫—É—Ä—Å–æ—Ä–∞ –Ω–∞ –ø–æ–ª–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
@rt.message(PostForm.date_info)
async def get_date_info(message: Message, state: FSMContext):
    msg = message.text
    try:
        if '.' in msg:
            our_data = datetime.datetime.strptime(msg, "%d.%m.%Y")
        else:
            our_data = datetime.datetime.strptime(msg, "%d/%m/%Y")
        if our_data.weekday() != 5 and our_data.weekday() != 6:
            await bot.send_message(message.chat.id, "–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –Ω–µ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å...")
            raise
        await state.update_data(date_info=our_data)
        await bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–≥—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>–ß–ß:–ú–ú</i>")
        await state.set_state(PostForm.time_info)
    except:
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–∞—Ç—É –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞")
        get_date_info(message, state)

# TODO: fix
# –í —ç—Ç–æ–º —Ö—ç–Ω–¥–ª–µ—Ä–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –≤—Ä–µ–º—è —Ç—É—Ä–Ω–∏—Ä–∞ –∏ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç–∞
@rt.message(PostForm.time_info)
async def get_time_info(message: Message, state: FSMContext):
    global full_name, full_time, difficulty, final_date, \
        place, txt_editors, editors_lst, post, weekday, txt_date
    await state.update_data(time_info=message.text)
    data = await state.get_data()
    global full_date
    full_date = data['date_info']
    full_time = data['time_info']
    txt_date = f'{str(full_date.day)} {month_dict[full_date.month]}'
    global week_day
    week_day = full_date.weekday()
    if week_day == 6:
        week_day = "–í–û–°–ö–†–ï–°–ï–ù–¨–ï"
        place = 401
    elif week_day == 5:
        week_day = '–°–£–ë–ë–û–¢–ê'
        place = 403
    final_date = week_day + ' (' + txt_date + ')'
    if 'shrek_mkm' not in data:
        id_url = quote(str(data['tournamentid']))
        url_parse = 'https://api.rating.chgk.net/tournaments/' + id_url
        global tournament_info
        if requests.get(url_parse).json() == []:
            await bot.send_message(message.chat.id, "–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π ID")
            await state.set_state(PostForm.tournament)
            get_tournament_info(message)
        tournament_info = requests.get(url_parse).json()
        await state.set_state(PostForm.price)
        full_name = tournament_info['name']
        difficulty = difficulty_symbol(tournament_info['difficultyForecast'])
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞—Ö
        editors = []
        if len(tournament_info['editors']) >= 6:
            for item in tournament_info['editors']:
                editors.append(item['surname'])
        else:
            for item in tournament_info['editors']:
                editors.append(f"{item['name']} {item['surname']}")
        txt_editors = "–†–µ–¥–∞–∫—Ç–æ—Ä" if len(editors) == 1 else "–†–µ–¥–∞–∫—Ç–æ—Ä—ã"
        editors_lst = ', '.join(editors)
        # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø–ª–∞—Ç–µ
        main_payment = tournament_info['mainPayment']
        if tournament_info['currency'] == 'r':
            currency_symbol = '‚ÇΩ'
        elif tournament_info['currency'] == 'u':
            currency_symbol = '$'
        else:
            currency_symbol = '‚Ç¨'
        try:
            discounted_payment = tournament_info['discountedPayment']
            annotation = tournament_info['discountedPaymentReason']
            currency_symbol_disc = currency_symbol
        except KeyError:
            discounted_payment = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª—å–≥–æ—Ç–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            annotation = "‚Äî"
            currency_symbol_disc = ''
        await message.answer(text='–ò—Å—Ö–æ–¥–Ω—ã–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞:')
        await message.answer(
            text=f'<b>–û—Å–Ω–æ–≤–Ω–æ–π —Ç–∞—Ä–∏—Ñ</b>: {main_payment}{currency_symbol} \n<b>–õ—å–≥–æ—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ</b>: {discounted_payment}{currency_symbol_disc} \n<b>–ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –ª—å–≥–æ—Ç–µ</b>: {annotation}', parse_mode='HTML')
    else:
        full_name = data['shrek_mkm']
        editors_lst = data['editors']
        if ',' in editors_lst:
            txt_editors = '–†–µ–¥–∞–∫—Ç–æ—Ä—ã'
        else:
            txt_editors = '–†–µ–¥–∞–∫—Ç–æ—Ä'
        difficulty = difficulty_symbol(2)
        await state.set_state(PostForm.price)
    await message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—É—é —Ç–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é. \n<blockquote><b>–ü—Ä–∏–º–µ—Ä:</b>\n–û—Å–Ω–æ–≤–Ω–æ–π / —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π / —à–∫–æ–ª—å–Ω—ã–π –∑–∞—á–µ—Ç - 1000 / 700 / 300\n–¢—Ä–æ–π–∫–∏ / –ø–∞—Ä–Ω—ã–π –∑–∞—á–µ—Ç - 700 / 500</blockquote>')

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ—Å—Ç–∞
@rt.message(PostForm.price)
async def make_post(message: Message, state: State):
    global cost, post
    cost = message.text
    try:
        if not cost.startswith('–û—Å–Ω–æ–≤–Ω–æ–π'):
            await bot.send_message(message.chat.id, "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å <i>–û—Å–Ω–æ–≤–Ω–æ–π...</i>. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ç–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é ")
            raise
        post = f'{difficulty} {html.bold(final_date)} {difficulty}\n–ß—Ç–æ‚ùì {full_name}\n–ì–¥–µ‚ùì XI –∫–æ—Ä–ø—É—Å –°–ì–£, {place} –∞—É–¥–∏—Ç–æ—Ä–∏—è\n–ö–æ–≥–¥–∞‚ùì {full_time}\n\n‚úçüèª {txt_editors} - {editors_lst}.\nüí≤ {cost}.'
        await message.answer(post)
        checking_keyboard = get_checking_keyboard()
        await message.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞. –í—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ?", reply_markup=checking_keyboard)
        await state.clear()
    except:
        make_post(message, state)


# @rt.callback_query(F.data == 'yes')
# async def posting(call: CallbackQuery):
#     builder_create_theme = InlineKeyboardBuilder()
#     btn = InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Ç–µ–º—É –∏ –æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", callback_data='theme_poll')
#     builder_create_theme.row(btn, width=1)
#     markup_creation = builder_create_theme.as_markup()
#     await call.message.answer(text="–û—Ç–ª–∏—á–Ω–æ, –ø–µ—Ä–µ–π–¥—ë–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É", reply_markup=markup_creation)
#     await call.answer()


@rt.callback_query(F.data == 'no')
async def correcting(call: CallbackQuery):
    await call.message.answer("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –ø–æ—Å—Ç, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç")
    await call.answer()


@rt.message(F.text.find('–ì–¥–µ‚ùì XI –∫–æ—Ä–ø—É—Å –°–ì–£') != -1)
async def new_post_init(message: Message):
    # TODO: fix
    global difficulty, final_date, week_day, txt_date, full_name, \
           place, full_time, txt_editors, editors_lst, cost, post
    post = message.text
    difficulty = post[0]
    final_date = post[2:post.find(difficulty, 1) - 1]
    week_day = final_date[:final_date.find('(') - 1]
    txt_date = final_date[final_date.find('(') + 1:final_date.find(')')]
    full_name = post[post.find('‚ùì') + 2:post.find('–ì–¥–µ') - 1]
    place = post[post.find('–°–ì–£,') + 5:post.find('–°–ì–£,') + 8]
    full_time = post[post.rfind('‚ùì') + 2:post.rfind('‚ùì') + 7]
    txt_editors = post[post.find('‚úçüèª') + 3:post.rfind('-') - 1]
    editors_lst = post[post.rfind('-') + 2:post.find('üí≤') - 1]
    cost = post[post.find('üí≤') + 2:post.rfind('.')]

    markup_creation = build_create_theme_markup()
    await message.answer(text="–û—Ç–ª–∏—á–Ω–æ, –ø–µ—Ä–µ–π–¥—ë–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É", reply_markup=markup_creation)


@rt.callback_query(F.data == 'theme_poll')
async def make_theme_and_poll(call: CallbackQuery, state: FSMContext):
    await call.answer()
    week_day_short = crop_week_day[week_day.lower()]
    theme_heading = f"{full_name} ({txt_date}, {week_day_short}, {full_time})"
    icon_color = get_item_color(difficulty=difficulty)
    text = f'{full_name}\n{txt_date} ({week_day}) {full_time}, {place} –∞—É–¥. \n{txt_editors} - {editors_lst}'
    topic = await bot.create_forum_topic(chat_id=TOPIC_ID, name=theme_heading, icon_color=icon_color)
    chat = await bot.get_chat(chat_id=TOPIC_ID)
    await bot.send_message(chat_id=TOPIC_ID, text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:", reply_to_message_id=topic.message_thread_id)
    await bot.send_poll(chat_id=TOPIC_ID, question=text, options=["–ò–≥—Ä–∞—é", "–î—É–º–∞—é", "–ü–∞—Å"], is_anonymous=False)
    
    keyboard_reging = build_reg_markup(chat_username=chat.username, topic_id=topic.message_thread_id)
    await state.update_data(markup=keyboard_reging)

    await call.message.answer(text="–¢–µ–º–∞ –∏ –æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã.\n–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞.")


@rt.message(F.photo)
async def make_post_with_photo(message: Message, state: FSMContext):
    keyboard_reging = await state.get_data()
    preview_url = await get_preview_url(message=message)

    await bot.send_message(
        # TODO: fix
        # chat_id= -1001614796938,
        # chat_id=ANNOUNCEMENT_CHANNEL_ID,
        chat_id=ANNOUNCEMENT_CHANNEL_ID,
        text=f"{html.link(value='&#8288', link=preview_url)}{post}",
        protect_content=False,
        reply_markup=keyboard_reging["markup"],
    )
    await message.answer("–ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª")
    await first_fork(message=message)


async def main():
    dp.include_router(rt)
    await dp.start_polling(bot)


async def logged_main():
    dp.include_router(rt)
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    scheduler = asyncio.AsyncIOScheduler()
    try:
       scheduler.start()
       await dp.start_polling(bot)
    finally:
        await dp.storage.close()
        await dp.storage.wait_closed()


if __name__ == "__main__":
    asyncio.run(main())
    # asyncio.run(logged_main())
